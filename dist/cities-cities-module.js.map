{"version":3,"sources":["webpack:///./src/app/layout/cities/cities-routing.module.ts","webpack:///./src/app/layout/cities/cities.component.html","webpack:///./src/app/layout/cities/cities.component.scss","webpack:///./src/app/layout/cities/cities.component.ts","webpack:///./src/app/layout/cities/cities.module.ts"],"names":[],"mappings":"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","file":"cities-cities-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { CitiesComponent } from './cities.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: CitiesComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class CitiesRoutingModule {}\n","module.exports = \"<ng-template #content let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n    <div class=\\\"modal-header\\\">\\n        <h4 class=\\\"modal-title\\\">Exclusão de cidade</h4>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n        <p>Tem certeza de que deseja excluir?</p>\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"c('dismiss')\\\">Não</button>\\n        <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"c('delete')\\\">Sim</button>\\n    </div>\\n</ng-template>\\n\\n<div class=\\\"row\\\">\\n    <div class=\\\"col-lg-3\\\">\\n    </div>\\n    <div class=\\\"col-lg-6\\\">\\n        <h3>Gerenciamento de cidades</h3>\\n        <hr>\\n        <ngb-alert [type]=\\\"alert.type\\\" (close)=\\\"closeAlert(alert)\\\" *ngFor=\\\"let alert of alerts\\\">{{ alert.message }}</ngb-alert>\\n        <form role=\\\"form\\\">\\n            <div class=\\\"row\\\">\\n                <div class=\\\"col-lg-8\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label>Nome da cidade</label>\\n                        <input [(ngModel)]=\\\"cityName\\\" name=\\\"cityName\\\" class=\\\"form-control\\\" >\\n                    </div>\\n                </div>\\n                <div class=\\\"col-lg-4\\\">\\n                    <div class=\\\"form-group\\\">\\n                        <label>Estado</label>\\n                        <select class=\\\"form-control\\\" [(ngModel)]=\\\"state\\\" name=\\\"state\\\">\\n                                <option value=\\\"-1\\\">Selecione...</option>\\n                            <option *ngFor=\\\"let s of states\\\" [ngValue]=\\\"s.id\\\">{{s.nomenclature}}</option>\\n                        </select>\\n                    </div>\\n                </div>\\n            </div>\\n            <div class=\\\"form-group\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-xl-12 text-right\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn btn btn-success\\\" (click)=\\\"addCity()\\\">Adicionar</button>\\n                    </div>\\n                </div>\\n            </div>\\n        </form>\\n        <hr>\\n        <table *ngIf=\\\"cities.length > 0\\\" class=\\\"card-body table\\\">\\n            <thead>\\n               <tr>\\n                  <th>Nome</th>\\n                  <th>Estado</th>\\n                  <th>Ações</th>\\n               </tr>\\n            </thead>\\n            <tbody *ngFor=\\\"let city of cities  | paginate: { itemsPerPage: 4, currentPage: page }\\\">\\n               <tr class=\\\"table-default\\\">\\n                  <td>{{ city.name }}</td>\\n                  <td>{{ city.state.nomenclature }}</td>\\n                  <td>\\n                     <button type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\" (click)=\\\"editCity(city)\\\">Editar</button>\\n                     <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"deleteCity(content, city)\\\">Deletar</button>\\n                  </td>\\n               </tr>\\n            </tbody>\\n         </table>\\n         <div class=\\\"has-text-centered\\\">\\n            <pagination-controls (pageChange)=\\\"page = $event\\\" previousLabel=\\\"Anterior\\\" nextLabel=\\\"Próximo\\\"></pagination-controls>\\n        </div>\\n    </div>\\n</div>\\n\"","module.exports = \".btn-sm {\\n  margin-left: 5px; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { LocationsService } from './../../services/locations/locations.service';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-cities',\n  templateUrl: './cities.component.html',\n  styleUrls: ['./cities.component.scss']\n})\nexport class CitiesComponent implements OnInit {\n\n    cities = [];\n    states = [];\n    cityName = null;\n    state = -1;\n    city_edit: any = null;\n    alerts: Array<any> = [];\n\n    constructor(public route: ActivatedRoute,\n        private router: Router,\n        private locationsService: LocationsService,\n        private modalService: NgbModal) { }\n\n    ngOnInit() {\n        if (localStorage.getItem('access_token') != null) {\n            this.load();\n        } else {\n            this.router.navigate(['/login']);\n        }\n    }\n\n    load() {\n        this.locationsService\n            .getStates(localStorage.getItem('access_token'))\n            .subscribe(\n                states => this.states = states\n            );\n        this.locationsService\n            .getCities(localStorage.getItem('access_token'))\n            .subscribe(\n                cities => this.cities = cities\n            );\n    }\n\n    addCity() {\n        if (this.validate()) {\n            const city = {\n                name: this.cityName,\n                state_id: this.state\n            };\n            if (this.city_edit == null) {\n                this.locationsService\n                .addCity(localStorage.getItem('access_token'), city)\n                .subscribe(\n                    () => {\n                        this.updateCities(false);\n                    }\n                );\n            } else {\n                this.locationsService\n                .editCity(localStorage.getItem('access_token'), city, this.city_edit.id)\n                .subscribe(\n                    () => {\n                        this.updateCities(true);\n                    }\n                );\n            }\n        }\n    }\n\n    editCity(city) {\n        console.log(city);\n        this.cityName = city.name;\n        this.state = city.state_id;\n        this.city_edit = city;\n    }\n\n    deleteCity(content, city) {\n        this.modalService\n            .open(content, { size: 'lg' })\n            .result.then((result) => {\n                if (result === 'delete') {\n                    this.locationsService\n                        .deleteCity(localStorage.getItem('access_token'), city.id)\n                        .subscribe(\n                            () => {\n                                this.load();\n                            }\n                        );\n                }\n        });\n    }\n\n    updateCities(edit) {\n        this.cityName = '';\n        this.state = -1;\n        this.load();\n\n        if (edit) {\n            this.showAlert('success', 'Cidade atualizada com sucesso!');\n            this.city_edit = null;\n        } else {\n            this.showAlert('success', 'Cidade inserida com sucesso!');\n        }\n\n    }\n\n    validate() {\n        if (this.cityName == null) {\n            this.showAlert('danger', 'Informe o nome da cidade!');\n            return false;\n        } else if (this.state == null) {\n            this.showAlert('danger', 'Informe o estado da cidade!');\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    showAlert(type, err) {\n        this.alerts.push(\n            {\n                id: 1,\n                type: type,\n                message: err\n            }\n        );\n    }\n\n    closeAlert(alert: any) {\n        const index: number = this.alerts.indexOf(alert);\n        this.alerts.splice(index, 1);\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { CitiesRoutingModule } from './cities-routing.module';\nimport { CitiesComponent } from './cities.component';\nimport { NgxMaskModule } from 'ngx-mask';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport { DatePipe } from '@angular/common';\n\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        NgSelectModule,\n        ReactiveFormsModule,\n        CitiesRoutingModule,\n        NgbAlertModule.forRoot(),\n        NgbModule.forRoot(),\n        NgxPaginationModule,\n        NgxMaskModule.forRoot()\n    ],\n    declarations: [ CitiesComponent ],\n    providers: [ DatePipe ],\n})\nexport class CitiesModule {}\n"],"sourceRoot":""}