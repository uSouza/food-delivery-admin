{"version":3,"sources":["webpack:///./src/app/layout/form-payments/form-payments-routing.module.ts","webpack:///./src/app/layout/form-payments/form-payments.component.html","webpack:///./src/app/layout/form-payments/form-payments.component.scss","webpack:///./src/app/layout/form-payments/form-payments.component.ts","webpack:///./src/app/layout/form-payments/form-payments.module.ts","webpack:///./src/app/services/form-payments/form-payments.service.ts"],"names":[],"mappings":"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","file":"form-payments-form-payments-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { FormPaymentsComponent } from './form-payments.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: FormPaymentsComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class FormPaymentsRoutingModule {}\n","module.exports = \"<ng-template #content let-c=\\\"close\\\" let-d=\\\"dismiss\\\">\\n        <div class=\\\"modal-header\\\">\\n            <h4 class=\\\"modal-title\\\">Exclusão de forma de pagamento</h4>\\n        </div>\\n        <div class=\\\"modal-body\\\">\\n            <p>Tem certeza de que deseja excluir a forma de pagamento?</p>\\n        </div>\\n        <div class=\\\"modal-footer\\\">\\n            <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"c('dismiss')\\\">Não</button>\\n            <button type=\\\"button\\\" class=\\\"btn btn-light\\\" (click)=\\\"c('delete')\\\">Sim</button>\\n        </div>\\n    </ng-template>\\n\\n    <div class=\\\"row\\\">\\n        <div class=\\\"col-lg-3\\\">\\n        </div>\\n        <div class=\\\"col-lg-6\\\">\\n            <h3>Gerenciamento de forma de pagamentos</h3>\\n            <hr>\\n            <ngb-alert [type]=\\\"alert.type\\\" (close)=\\\"closeAlert(alert)\\\" *ngFor=\\\"let alert of alerts\\\">{{ alert.message }}</ngb-alert>\\n            <form role=\\\"form\\\">\\n                <div class=\\\"row\\\">\\n                    <div class=\\\"col-lg-12\\\">\\n                        <div class=\\\"form-group\\\">\\n                            <label>Nome da forma</label>\\n                            <input [(ngModel)]=\\\"description\\\" name=\\\"description\\\" class=\\\"form-control\\\" type=\\\"text\\\">\\n                        </div>\\n                    </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                    <div class=\\\"row\\\">\\n                        <div class=\\\"col-xl-12 text-right\\\">\\n                            <button type=\\\"button\\\" class=\\\"btn btn btn-success\\\" (click)=\\\"addFormPayment()\\\">Adicionar</button>\\n                        </div>\\n                    </div>\\n                </div>\\n            </form>\\n            <table *ngIf=\\\"form_payments.length > 0\\\" class=\\\"card-body table\\\">\\n                <thead>\\n                   <tr>\\n                      <th>Descrição</th>\\n                      <th>Ações</th>\\n                   </tr>\\n                </thead>\\n                <tbody *ngFor=\\\"let form of form_payments  | paginate: { itemsPerPage: 4, currentPage: page }\\\">\\n                   <tr class=\\\"table-default\\\">\\n                      <td>{{form.description}}</td>\\n                      <td>\\n                         <button type=\\\"button\\\" class=\\\"btn btn-sm btn-success\\\" (click)=\\\"editFormPayment(form)\\\">Editar</button>\\n                         <button type=\\\"button\\\" class=\\\"btn btn-sm btn-danger\\\" (click)=\\\"deleteFormPayment(content, form)\\\">Deletar</button>\\n                      </td>\\n                   </tr>\\n                </tbody>\\n             </table>\\n             <div class=\\\"has-text-centered\\\">\\n                <pagination-controls (pageChange)=\\\"page = $event\\\" previousLabel=\\\"Anterior\\\" nextLabel=\\\"Próximo\\\"></pagination-controls>\\n            </div>\\n        </div>\\n    </div>\\n\"","module.exports = \"form {\\n  margin-top: 20px; }\\n\\n.btn-sm {\\n  margin-left: 5px; }\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { FormPaymentsService } from '../../services/form-payments/form-payments.service';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-form-payments',\n  templateUrl: './form-payments.component.html',\n  styleUrls: ['./form-payments.component.scss']\n})\nexport class FormPaymentsComponent implements OnInit {\n\n    public alerts: Array<any> = [];\n\n    description: any = null;\n    form_payment_edit: any = null;\n    form_payments: any[] = [];\n    page: number = 1;\n\n    constructor(public route: ActivatedRoute,\n                private router: Router,\n                private formPaymentsService: FormPaymentsService,\n                private modalService: NgbModal\n                ) { }\n\n    ngOnInit() {\n\n        if (localStorage.getItem('access_token') != null) {\n            this.formPaymentsService\n                .getFormPayments(localStorage.getItem('access_token'))\n                .subscribe(\n                    form_payments => {\n                        this.form_payments = form_payments\n                    })\n        } else {\n            this.router.navigate(['/login']);\n        }\n\n    }\n\n    addFormPayment() {\n        if (this.validate()) {\n            let form_payment = {\n                description: this.description\n            }\n            if (this.form_payment_edit == null) {\n                this.formPaymentsService\n                    .addFormPayment(localStorage.getItem('access_token'), form_payment)\n                    .subscribe(\n                        form_payment => {\n                            this.updateFormPayments(form_payment, false)\n                        }\n                    )\n            } else {\n                this.formPaymentsService\n                .editFormPayment(localStorage.getItem('access_token'), form_payment, this.form_payment_edit.id)\n                .subscribe(\n                    form_payment => {\n                        this.updateFormPayments(form_payment, true)\n                    }\n                )\n            }\n\n        }\n    }\n\n    updateFormPayments(form_payment, edit) {\n        this.description = null;\n        this.form_payments.push(form_payment);\n        if (edit) {\n            this.showAlert('success', 'Forma de pagamento atualizada com sucesso!');\n            const index: number = this.form_payments.indexOf(this.form_payment_edit);\n            this.form_payments.splice(index, 1);\n            this.form_payment_edit = null;\n        } else {\n            this.showAlert('success', 'Forma de pagamento atualizada com sucesso!');\n        }\n\n    }\n\n    validate() {\n        if (this.description == null) {\n            this.showAlert('danger', 'Informe a descrição da forma de pagamento!');\n            return false;\n        } else {\n            return true;\n        }\n    }\n\n    showAlert(type, err) {\n        this.alerts.push(\n            {\n                id: 1,\n                type: type,\n                message: err\n            }\n        )\n    }\n\n    closeAlert(alert: any) {\n        const index: number = this.alerts.indexOf(alert);\n        this.alerts.splice(index, 1);\n    }\n\n    editFormPayment(form_payment) {\n        this.description = form_payment.description;\n        this.form_payment_edit = form_payment;\n    }\n\n    deleteFormPayment(content, form_payment) {\n        this.modalService\n            .open(content, { size: 'lg' })\n            .result.then((result) => {\n                if (result == 'delete') {\n                    const index: number = this.form_payments.indexOf(form_payment);\n                    this.form_payments.splice(index, 1);\n                    this.formPaymentsService\n                        .deleteFormPayment(localStorage.getItem('access_token'), form_payment.id)\n                        .subscribe(\n                            res => {\n                                console.log(res)\n                            }\n                        )\n                }\n            });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgbAlertModule } from '@ng-bootstrap/ng-bootstrap';\nimport { NgxPaginationModule } from 'ngx-pagination';\nimport { FormPaymentsRoutingModule } from './form-payments-routing.module';\nimport { FormPaymentsComponent } from './form-payments.component';\nimport {NgxMaskModule} from 'ngx-mask';\nimport { NgSelectModule } from '@ng-select/ng-select';\nimport {DatePipe} from '@angular/common';\n\n@NgModule({\n    imports: [\n        CommonModule,\n        FormsModule,\n        NgSelectModule,\n        ReactiveFormsModule,\n        FormPaymentsRoutingModule,\n        NgbAlertModule.forRoot(),\n        NgbModule.forRoot(),\n        NgxPaginationModule,\n        NgxMaskModule.forRoot()\n    ],\n    declarations: [FormPaymentsComponent],\n    providers: [DatePipe],\n})\nexport class FormPaymentsModule {}\n","import { Injectable } from '@angular/core';\nimport { url_api } from '../../config';\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormPaymentsService {\n\n    endpoint = 'form_payments';\n\n    constructor(public http: HttpClient) { }\n\n    getFormPayments(access_token: any) {\n      return this.http.get<any[]>(url_api + this.endpoint,\n        {headers: {\n                  'Accept': 'application/json',\n                  'Authorization': 'Bearer ' + access_token\n                }\n        });\n      }\n\n    addFormPayment(access_token: any, form_payment: any) {\n          let data = {\n              description: form_payment.description,\n            };\n          return this.http.post<any>(url_api + this.endpoint, data, {\n              headers: {\n                  'Accept': 'application/json',\n                  'Authorization': 'Bearer ' + access_token,\n                  'Content-Type': 'application/json'\n              }\n          });\n    }\n\n    editFormPayment(access_token: any, form_payment: any, id: any) {\n        let data = {\n            description: form_payment.description,\n          };\n          return this.http.put<any>(url_api + this.endpoint + '/' + id, data, {\n              headers: {\n                  'Accept': 'application/json',\n                  'Authorization': 'Bearer ' + access_token,\n                  'Content-Type': 'application/json'\n              }\n          });\n      }\n\n      deleteFormPayment(access_token: any, id: any) {\n          return this.http.delete<any>(url_api + this.endpoint + '/' + id, {\n              headers: {\n                  'Accept': 'application/json',\n                  'Authorization': 'Bearer ' + access_token,\n                  'Content-Type': 'application/json'\n              }\n          });\n      }\n}\n"],"sourceRoot":""}